import unittest
from Tests.abstractTest import AbstractTest
from Utility.ReturnValue import ReturnValue
from Business.Match import Match
from Business.Stadium import Stadium
from Business.Player import Player
import Solution


'''
    Simple test, create one of your own
    make sure the tests' names start with test_
'''



class Test(AbstractTest):
    def test_AddTeam(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addTeam(1), "ID 1 already exists")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addTeam(0), "bad params")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addTeam(-10), "bad params")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")

    def test_Match(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(5), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 1, 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(3, "Domestic", 1, 4)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addMatch(Match(1, "Domestic", 1, 5)), "Match ID 1 already exists")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addMatch(Match(4, "Domestic", 5, 6)), "Team with ID 6 doesn't exist")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addMatch(Match(4, "Domestic", 6, 2)), "Team with ID 6 doesn't exist")

    def test_Player(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 185, "Left")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 1, 20, 185, "Left")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(3, 1, 20, 185, "Left")), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addPlayer(Player(1, 1, 20, 185, "Left")), "ID 1 already exists")

    def test_Stadium(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55000, 1)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addStadium(Stadium(1, 5000, 1)), "ID 1 already exists")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addStadium(Stadium(4, 5000, 1)), "ID 1 already exists")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addStadium(Stadium(2, 5000, 3)), "teamID 3 not exists")
 
    def test_averageAttendanceInStadium(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55000, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(2, 55000, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(4, 55000, 4)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(1, "Domestic", 1, 2), Stadium(1, 55000, 1), 1000), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(2, "Domestic", 1, 2), Stadium(4, 55000, 4), 0), "Should work")
        self.assertEqual(1000, Solution.averageAttendanceInStadium(1), "Should work")
        self.assertEqual(0, Solution.averageAttendanceInStadium(2), "Should return 0")
        self.assertEqual(0, Solution.averageAttendanceInStadium(3), "Should return 0")
        self.assertEqual(0, Solution.averageAttendanceInStadium(4), "Should return 0")


    def test_stadiumTotalGoals(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 185, "Left")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 2, 20, 190, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55000, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(2, 55000, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(1, "Domestic", 1, 2), Stadium(1, 55000, 1), 1000), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2), Player(1, 1, 20, 185, "Left"), 3), "Should work")
        self.assertEqual(3, Solution.stadiumTotalGoals(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2), Player(2, 2, 20, 190, "Right"), 2), "Should work")
        
        self.assertEqual(5, Solution.stadiumTotalGoals(1), "Should work")
        self.assertEqual(0, Solution.stadiumTotalGoals(2), "Should return 0")
        self.assertEqual(0, Solution.stadiumTotalGoals(3), "Should return 0")
        self.assertEqual(0, Solution.stadiumTotalGoals(-1), "Should return 0 or 1, check later")
        # playerIsWinner
        self.assertEqual(True, Solution.playerIsWinner(1,1), "Should return true or false, check later")
        self.assertEqual(False, Solution.playerIsWinner(2,1), "Should return true or false, check later")
        self.assertEqual(ReturnValue.OK, Solution.playerDidntScoreInMatch(Match(1, "Domestic", 1, 2), Player(2, 2, 20, 190, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2), Player(2, 2, 20, 190, "Right"), 3), "Should work")
        self.assertEqual(True, Solution.playerIsWinner(1,1), "Should return true or false, check later")
        self.assertEqual(True, Solution.playerIsWinner(2,1), "Should return true or false, check later")
        self.assertEqual(False, Solution.playerIsWinner(3,1), "Should return true or false, check later")

    def test_tallTeams(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 192, "Left")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 2, 20, 185, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(3, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(4, 2, 20, 190, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(5, 2, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addPlayer(Player(5, 2, 20, 210, "Right")), "Should work")

    def test_deleteStadium(self):
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55000, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(1, "Domestic", 1, 2), Stadium(1, 55000, 1), 1000), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.deleteStadium(Stadium(1, 55000, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55000, 1)), "Should work")
        
    def test_active_tall_rich_teams(self) -> None:
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(5), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(6), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(7), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(8), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(9), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55001, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(2, 55001, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(3, 55000, 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 3, 4)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(3, "Domestic", 5, 6)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(4, "Domestic", 7, 8)), "Should work")
        self.assertEqual([], Solution.getActiveTallTeams(), "Should work")
        self.assertEqual([], Solution.getActiveTallRichTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(3, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(4, 2, 20, 191, "Right")), "Should work")
        self.assertEqual([2], Solution.getActiveTallTeams(), "Should work")
        self.assertEqual([2], Solution.getActiveTallRichTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 1, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(7, 4, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(8, 4, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(5, 3, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(6, 3, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(9, 5, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(10, 5, 20, 210, "Right")), "Should work")
        self.assertEqual([5,4,3,2,1], Solution.getActiveTallTeams(), "Should work")
        self.assertEqual([1,2], Solution.getActiveTallRichTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(11, 6, 20, 210, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(12, 6, 20, 210, "Right")), "Should work")
        self.assertEqual([6,5,4,3,2], Solution.getActiveTallTeams(), "Should work")
        self.assertEqual(ReturnValue.ALREADY_EXISTS, Solution.addMatch(Match(1, "Domestic", 1, 5)), "ID 1 already exists")
        Solution.clearTables()
        Solution.clearTables()


    def test_popular_teams(self):
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55001, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(2, 55000, 2)), "Should work")
        self.assertEqual([4,3,2,1], Solution.popularTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 2, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(3, "Domestic", 3, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(4, "Domestic", 3, 4)), "Should work")
        self.assertEqual([4], Solution.popularTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(3, "Domestic", 3, 2),Stadium(1, 55001, 1), 40001), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(4, "Domestic", 3, 4),Stadium(1, 55001, 1), 40001), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(1, "Domestic", 1, 2),Stadium(1, 55001, 1), 40000), "Should work")
        self.assertEqual([4,3], Solution.popularTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(5, "Domestic", 3, 4)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(5, "Domestic", 3, 4),Stadium(1, 55001, 1), 40000), "Should work")
        self.assertEqual([4], Solution.popularTeams(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(2, "Domestic", 2, 1),Stadium(1, 55001, 1), 50000), "Should work")
        self.assertEqual([4,2], Solution.popularTeams(), "Should work")


    def test_getMostAttractiveStadiums(self):
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(3, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55001, 1)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(2, 55000, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 2, 3)), "Should work")
        self.assertEqual([1,2], Solution.getMostAttractiveStadiums(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(2, "Domestic", 2, 3),Stadium(2, 55001, 1), 50000), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 2, 3),Player(3, 2, 20, 191, "Right"),5), "Should work")
        self.assertEqual([2,1], Solution.getMostAttractiveStadiums(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 2, 3),Player(1, 2, 20, 191, "Right"),3), "Should work")
        self.assertEqual([2,1], Solution.getMostAttractiveStadiums(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.matchInStadium(Match(1, "Domestic", 1, 2),Stadium(1, 55000, 2), 50000), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(2, 2, 20, 191, "Right"),10), "Should work")
        self.assertEqual([1,2], Solution.getMostAttractiveStadiums(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 1, 2),Player(2, 2, 20, 191, "Right"),10), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(4, 55000, 4)), "Should work") #check later when PIAZZI
        self.assertEqual([2,1,4], Solution.getMostAttractiveStadiums(), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(3, 55000, 3)), "Should work") #check later when PIAZZI
        self.assertEqual([2,1,3,4], Solution.getMostAttractiveStadiums(), "Should work")


    def test_mostGoalsForTeam(self):
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(4), "Should work")
        self.assertEqual([], Solution.mostGoalsForTeam(5), "Should work")
        self.assertEqual([], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(3, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(4, 2, 20, 191, "Right")), "Should work")
        self.assertEqual([4,3,2], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(5, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(6, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(7, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 2, 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(3, "Domestic", 2, 3)), "Should work")
        self.assertEqual([7,6,5,4,3], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 2, 3),Player(3, 2, 20, 191, "Right"),5), "Should work")
        self.assertEqual([3,7,6,5,4], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 2, 3),Player(1, 1, 20, 191, "Right"),3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(2, 2, 20, 191, "Right"),7), "Should work")
        self.assertEqual([2,3,7,6,5], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(3, 2, 20, 191, "Right"),5), "Should work")
        self.assertEqual([3,2,7,6,5], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(3, "Domestic", 2, 3),Player(2, 2, 20, 191, "Right"),3), "Should work")
        self.assertEqual([3,2,7,6,5], Solution.mostGoalsForTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 2, 3),Player(2, 2, 20, 191, "Right"),3), "Should work")
        self.assertEqual([2,3,7,6,5], Solution.mostGoalsForTeam(2), "Should work")


    def test_getClosePlayers(self):
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(1, 1, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(3, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(4, 2, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 2, 3)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(3, "Domestic", 2, 3)), "Should work")
        self.assertEqual([1,2,4], Solution.getClosePlayers(3), "Should work")
        self.assertEqual([1,2,3], Solution.getClosePlayers(4), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(2, 2, 20, 191, "Right"),7), "Should work")
        self.assertEqual([], Solution.getClosePlayers(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(4, 2, 20, 191, "Right"),7), "Should work")
        self.assertEqual([1,2,4], Solution.getClosePlayers(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(3, 2, 20, 191, "Right"),5), "Should work")
        self.assertEqual([2,4], Solution.getClosePlayers(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.playerScoredInMatch(Match(2, "Domestic", 2, 3),Player(1, 1, 20, 191, "Right"),3), "Should work")
        self.assertEqual([2,4], Solution.getClosePlayers(3), "Should work")

    def test_null(self):
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addTeam(None), "Should not work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(1), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(2), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addTeam(3), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(1, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addMatch(Match(2, "Domestic", 1, 2)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addMatch(Match(3, "Domestic", 2, None)), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addMatch(Match(3, "Domestic", None, 2)), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addMatch(Match(None, "Domestic", 1, 2)), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addMatch(Match(4, "wow", 1, 2)), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPlayer(Player(None, 1, 20, 191, "Right")), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPlayer(Player(1, None, 20, 191, "Right")), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPlayer(Player(2, 1, None, 191, "Right")), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPlayer(Player(2, 1, 20, None, "Right")), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addPlayer(Player(2, 1, 20, 191, None)), "Should not work")
        self.assertEqual(ReturnValue.OK, Solution.addPlayer(Player(2, 1, 20, 191, "Right")), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addStadium(Stadium(1, None, 1)), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.addStadium(Stadium(None, 55000, 1)), "Should not work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(1, 55000, None)), "Should work")
        self.assertEqual(ReturnValue.OK, Solution.addStadium(Stadium(2, 55000, None)), "Should work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(None, 1, 20, 191, "Right"),7), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.playerScoredInMatch(Match(1, "Domestic", 1, 2),Player(2, 1, 20, 191, "Right"),None), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.playerScoredInMatch(Match(None, "Domestic", 1, 2),Player(2, 1, 20, 191, "Right"),7), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.matchInStadium(Match(None, "Domestic", 2, 3),Stadium(2, 55001, 1), 50000), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.matchInStadium(Match(2, "Domestic", 2, 3),Stadium(2, 55001, 1), None), "Should not work")
        self.assertEqual(ReturnValue.BAD_PARAMS, Solution.matchInStadium(Match(2, "Domestic", 2, 3),Stadium(None, 55001, 1), 50000), "Should not work")


# *** DO NOT RUN EACH TEST MANUALLY ***
if __name__ == '__main__':
    Solution.dropTables()
    # Solution.createTables()
    # Test.test_Team()
    
    unittest.main(verbosity=2, exit=False)